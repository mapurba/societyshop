{"version":3,"sources":["./src/app/schemas/paymentResponce.ts","./src/app/sharedModule/shared/payment/payment.component.html","./src/app/sharedModule/shared/payment/payment.component.ts","./src/app/clientModule/client/chart/chart.component.html","./src/app/clientModule/client/chart/chart.component.ts","./src/app/services/items.service.ts","./src/app/sharedModule/shared/item-list/item-list.component.html","./src/app/sharedModule/shared/item-list/item-list.component.ts","./src/app/clientModule/client/client.module.ts","./src/app/clientModule/client/feed/feed.component.ts","./src/app/clientModule/client/feed/feed.component.html"],"names":["PAYMENT_TYPE_RESPONCE","card_cvv","card_expiryMonth","card_expiryYear","card_holder","card_number","paymentOption","upi_vpa","upi","vpa","paymentComponentMode","cashFreeSDKEventEnums","componentÌ¥StateService","http","route","sanitizer","window","loading","addToCartState","orderId","orderCreationFailed","isOrderCreating","enablePayment","showiframeScreen","componentMode","fullPage","upiAddress","paymentProcessiong","upiValid","_setDisplayMode","isloading","this","ngOnInit","console","log","onStateChange","OpenSearchBoxState","subscribe","res","id","addToCart","value","get","Map","state","forEach","key","push","cartItems","ngAfterViewInit","setTimeout","ngDoCheck","initiateCashfree","config","layout","checkout","mode","view","width","init","handleResponse","data","callback","event","name","paymentRequest","paymentResponse","JSON","stringify","retriveItemFromLocalStore","lastValue","localStorage","getItem","length","parse","e","error","dummylist","createOrderAndToPayment","post","items","respos","_id","currentOrderDetail","err","paymentRedirection","orderDetail","newOrderDetail","order","orderAmount","customerName","user","profile","customerEmail","customerPhone","formObj","paymentType","additionalFields","paymentDetail","paymentData","returnUrl","notifyUrl","source","paySeamless","redirectToCashFree","changePaymentMode","payMode","processPayment","payload","status","valid","PaymentComponent","Window","provide","useValue","mergeCartValue","oldCart","newCart","coppyAll","oldCartMap","newCartMap","item","set","itemCode","entries","Array","from","values","clearCurrentCart","setState","initiatePayment","orderDetails","ngDestroy","unsubscribe","ChartComponent","getAllItems","getinventoryFrommerchant","fetchsearchResult","Q","addNewItem","ItemsService","itemService","componentStateService","_list","setlist","val","_searchQ","loadSearchResult","getAllItem","map","itemC","quantity","ItemListComponent","clientRoutes","forChild","path","pathMatch","component","searchListQ","params","search","FeedComponent","ClientModule"],"mappings":"yQAAaA,EACH,CAEFC,SAAU,MACVC,iBAAkB,KAClBC,gBAAiB,OACjBC,YAAa,IACbC,YAAa,mBACbC,cAAe,QARVN,EAYJ,CAEDO,QAAS,GACTC,IAAK,CAAEC,IAAK,uBACZH,cAAe,OAhBVN,EAmBG,G,iPC6BF,iBACE,iBACE,aAAI,kBAAO,OACX,mBAAmB,yBAAc,OACjC,iBACE,eACA,eACA,eACA,gBACF,OACA,oBAAmB,wBAAY,OAC/B,oBACA,oBAAmB,8BAAkB,OACrC,oBACA,oBAAsB,qBAAS,OAC/B,oBACA,kBACE,kBACE,oBAAqB,oBAAQ,OAC7B,oBACF,OACA,kBACE,oBAAiB,eAAG,OACpB,oBACF,OACF,OACF,OACF,Q,sBAEE,mBAA6C,kBAAO,Q,sBACpD,mBAA4C,mCAAwB,Q,yBAFtE,iBACE,yBACA,yBACA,mBACF,Q,kBAHsB,wCACA,uCACyB,mDAAoC,6B,sBAGjF,oBACE,iBACE,wBACF,OACA,iBAAQ,gBACR,OACF,Q,qBA6CF,iB,sBACA,eAAkC,iBAAM,Q,wBAYtD,oB,kBAAwD,gCCxIxD,IAAYU,EAAZ,SAAYA,G,OACV,+BACA,2BAFUA,EAAZ,CAGC,IAEWC,EAAZ,SAAYA,G,OAAwB,mCAAoC,qCAA5DA,EAAZ,CAA8G,IAM9G,aA2CE,WACUC,EACAC,EACAC,EACAC,EACAC,GAJA,KAAAJ,8BACA,KAAAC,OACA,KAAAC,QACA,KAAAC,YACA,KAAAC,SAvCV,KAAAC,SAAmB,EAInB,KAAAC,eAAyB,YACzB,KAAAC,QAAe,KAEf,KAAAC,qBAAsB,EAEtB,KAAAC,iBAAkB,EAElB,KAAAC,eAAgB,EAQhB,KAAAC,kBAA4B,EAK5B,KAAAC,cAAgBd,EAAqBe,SACrC,KAAAC,WAAa,IAAI,IAAY,IAE7B,KAAAC,oBAAqB,EACrB,KAAAC,SAAW,GACc,KAAAC,gBAAkB,E,OAE3C,YAAAC,UAAA,WACE,OAAOC,KAAKd,SAUd,YAAAe,SAAA,sBAEEC,QAAQC,IAAIH,KAAKF,iBAYjBE,KAAKnB,4BACFuB,cAAc,IAAWC,oBACzBC,UAAU,SAACC,GAEV,GAAIA,EAAIC,KAAO,IAAWC,UAAW,CACpBF,EAAIG,MAAMC,IAAI,IAAWF,WACxCP,QAAQC,IAAI,iBACZ,IAAI,EAAY,IAAIS,IAAI,YAA0B,cAClD,EAAKC,MAAQ,CAAEH,MAAO,IACtB,EAAUI,QAAQ,SAACJ,EAAYK,GAC7B,EAAKF,MAAMH,MAAMM,KAAKN,QAK9B,IAAIO,EAAY,IAAIL,IAAI,YAA0B,cAClDZ,KAAKa,MAAQ,CAAEH,MAAO,IACtBO,EAAUH,QAAQ,SAACJ,EAAYK,GAC7B,EAAKF,MAAMH,MAAMM,KAAKN,MAI1B,YAAAQ,gBAAA,sBACEC,WAAW,WACT,EAAKjC,SAAU,EACfgB,QAAQC,IAAI,EAAKjB,UAChB,MAGL,YAAAkC,UAAA,aAcA,YAAAC,iBAAA,WACE,IAAIC,EAAS,CAAEC,OAAQ,GAAIC,SAAU,GAAIC,KAAM,QAC/CH,EAAOC,OAAS,CAAEG,KAAM,QAASC,MAAO,OAExCL,EAAOE,SAAW,cAClBF,EAAOG,KAAO,OACdzB,KAAKf,OAAiB,SAAE2C,KAAKN,IAG/B,YAAAO,eAAA,SAAeC,GACb5B,QAAQC,IAAI2B,IAGd,YAAAC,SAAA,SAASC,GAKP,OAHA9B,QAAQC,IAAI,kCACZD,QAAQC,IAAI,SAAU6B,GAEdA,EAAMC,MACZ,KAAKrD,EAAsBsD,eACzBhC,QAAQC,IAAI,4BACZD,QAAQC,IAAI,SAAU6B,GAKtB9B,QAAQC,IAAI,SAAU6B,GACtB,MAEF,KAAKpD,EAAsBuD,gBAEzBjC,QAAQC,IAAI,6BACZD,QAAQC,IAAI,SAAU6B,GAEtBhC,KAAK6B,eAAeO,KAAKC,UADJL,EAAK,WAE1B,MAEF,QACE9B,QAAQC,IAAI,sBACZD,QAAQC,IAAI,SAAU6B,KAK5B,YAAAM,0BAAA,SAA0B9B,GACxB,IAAI+B,EAAYC,aAAaC,QAAQjC,GACrC,GAAI+B,GAAaA,EAAUG,OAAS,EAClC,IACE,OAAON,KAAKO,MAAMH,aAAaC,QAAQjC,IACvC,MAAOoC,GAEP,OADA1C,QAAQ2C,MAAM,qBACP7C,KAAK8C,UAGhB,OAAO9C,KAAK8C,WAEd,YAAAC,wBAAA,sBACE/C,KAAKV,iBAAkB,EAIvBU,KAAKlB,KAAKkE,KAAK,qBAAsB,CAAEC,MAAOjD,KAAKa,MAAMH,QAASJ,UAChE,SAACC,GACCL,QAAQC,IAAI,CAAE,sBAAuBI,IACrC,EAAKjB,iBAAkB,EACvB,EAAKF,QAAUmB,EAAI2C,OAAOC,IAC1B,EAAK5D,eAAgB,EACrB,EAAKF,qBAAsB,EAC3B,EAAK+D,mBAAqB7C,EAAI2C,QAGhC,SAACG,GACC,EAAK/D,iBAAkB,EACvB,EAAKD,qBAAsB,EAC3B,EAAKD,QAAU,EACf,EAAKG,eAAgB,KAK3B,YAAA+D,mBAAA,SAAmBC,GAAnB,WAKMC,EAAiB,CACnBpE,QAASmE,EAAYE,MAAMN,IAC3BO,YAAa,EACbC,aAAcJ,EAAYE,MAAMG,KAAKC,QAAQ5B,KAC7C6B,cAAe,UACfC,cAAe,cAEjB/D,KAAKlB,KACFkE,KACC,wFACA,CACEgB,QAASR,EACTS,YAAa,kBAGhB3D,UAAU,SAACC,GACVL,QAAQC,IAAI,IAAD,KAAMI,EAAI2D,kBAAqBV,GAAmBD,EAAYY,gBACzE,IAAIC,EAAc,EAAH,SACV7D,EAAI2D,kBACJV,GACAD,EAAYY,eAAa,CAG5BE,UAAW,sDACXC,UAAW,sDACXC,OAAQ,qBASV,IACE,EAAKlD,mBACL,EAAKpC,OAAiB,SAAEuF,YAAYJ,EAAa,EAAKrC,UACtD,MAAOa,GACP1C,QAAQC,IAAIyC,OAOpB,YAAA6B,mBAAA,SAAmB3C,GACjB9B,KAAKlB,KACFkE,KACC,8DAA6D,KACxDlB,IAENxB,UAAU,SAACC,OAUhB,YAAAmE,kBAAA,SAAkBlE,GAChBN,QAAQC,IAAI,qBACZH,KAAK2E,QAAUnE,GAmBjB,YAAAoE,eAAA,sBACE5E,KAAKJ,oBAAqB,EAE1B,IAAIiF,EAAU,CAAEpB,MAAOzD,KAAKoD,mBAAoBe,cAAe,IAC/D,OAAQnE,KAAK2E,SACX,IAAK,MAiBH,OAfAE,EAAQV,cAAgBlG,EACxB4G,EAAQV,cAAmB,IAAEzF,IAAMsB,KAAKL,WAAWe,MACnDmE,EAAQV,cAAuB,QAAInE,KAAKL,WAAWe,WACnDV,KAAKlB,KAAKkE,KAAK,uBAAwB6B,EAAQV,eAAe7D,UAAU,SAACC,GAEvE,GAAkB,MAAdA,EAAIuE,QAA+B,GAAbvE,EAAIwE,MAM5B,OAFA,EAAKlF,SAAW,WAChB,EAAKD,oBAAqB,GAJ1B,EAAKC,SAAW,QAChB,EAAKyD,mBAAmBuB,KAU9B,IAAK,OACHA,EAAQV,cAAgBlG,EACxB,MAEF,IAAK,KACH4G,EAAQV,cAAgBlG,EACxB,MAEF,QAAS,OAGX+B,KAAKsD,mBAAmBuB,I,sCA9SfG,GAAgB,6CAwCTC,U,uBAxCPD,EAAgB,qGAJhB,CACT,CAAEE,QAASD,OAAQE,SAAUlG,WAC9B,6uED1BH,aAEA,gBACE,gBACE,gBACA,oHAEF,OACF,OACA,QACA,gBACE,gBACE,iBACE,kBACE,cACE,cAAI,oBAAQ,OACZ,cAAI,mBAAwD,OAC9D,OACA,cACE,cAAI,wBAAY,OAChB,cACE,mBACF,OACF,OACA,cACE,cAAI,yBAAa,OACjB,cAAI,mBAA0D,OAChE,OACA,cACE,cAAI,0BAAc,OAClB,cACE,oBACF,OACF,OACA,cACE,cAAI,0BAAc,OAClB,cAAI,oBAA6D,OACnE,OACF,OACA,kBAGA,iBACE,iBAEE,kBACE,gBACE,yBA4BA,wBAKA,kBACE,2BAOF,OACF,OACF,OACF,OAGA,kBACE,cACE,cACE,oBACA,kBAAoC,+BAAS,EAAAyF,kBAAkB,SAC7D,iBACF,OACF,OACA,cACE,oBACA,kBAA4B,+BAAS,EAAAA,kBAAkB,UACrD,kBACF,OACF,OAOF,OACF,OAGA,cAEE,kBACE,aACE,SACF,OAEA,qBAAiF,+BAAS,EAAA3B,4BACxF,SACF,OAIA,qBAAqD,+BAAS,EAAA6B,mBAC5D,wBACA,yBACF,OACF,OACF,OAGF,OAGF,OACF,OACF,OACA,4B,MA/IkB,yCAES,sCAK3B,0CAC0B,0CAMsB,kCAKY,sGAsBhD,wCAI8B,uCA4BL,sCAMkB,qCAavB,uCA4BlB,kHAGyB,2CAA4B,0BACrD,2DAKM,wCACA,0CACC,2CAYW,0C,w+FC7HhC,G,yBCZM,iBACE,2BAA8C,YAAC,OACjD,Q,uBADiB,uBAAa,e,yBAFhC,gBACE,sBAGF,Q,kBAH0C,qC,sBAO9C,oBACE,iBACE,iBACE,qBACF,OACF,OACF,Q,MAHe,kCCTf,iBAUE,WACU/F,EACAC,EACAC,GAFA,KAAAF,8BACA,KAAAC,OACA,KAAAC,QALV,KAAAI,eAAyB,YAOvBa,KAAK8C,UAAY,G,OAGnB,YAAA5B,gBAAA,aAIA,YAAAjB,SAAA,sBACED,KAAK8C,UAAY,GAEjB9C,KAAKnB,4BACFuB,cAAc,IAAWC,oBACzBC,UAAU,SAACC,GAEV,GAAIA,EAAIC,KAAO,IAAWC,UAAW,CACpBF,EAAIG,MAAMC,IAAI,IAAWF,WAGxCP,QAAQC,IAAI,iBACZ,IAAI,EAAY,IAAIS,IAAI,YAA0B,cAClD,EAAKkC,UAAY,GACjB,EAAUhC,QAAQ,SAACJ,EAAYK,GAC7B,EAAK+B,UAAU9B,KAAKN,QAQZ,IAAIE,IAAI,YAA0B,cACxCE,QAAQ,SAACJ,EAAYK,GAC7B,EAAK+B,UAAU9B,KAAKN,MAMxB,YAAAU,UAAA,aAgBA,YAAAgE,eAAA,SAAeC,EAASC,EAASC,GAC/B,IAAIC,EAAa,IAAI5E,IACjB6E,EAAa,IAAI7E,IASrB,GAAI2E,EAQF,OAPAF,EAAQvE,QAAQ,SAAC4E,GACfD,EAAWE,IAAID,EAAKE,SAAUF,KAEhCJ,EAAQxE,QAAQ,SAAC4E,GACVF,EAAW7E,IAAI+E,EAAKE,WAAWJ,EAAWG,IAAID,EAAKE,SAAUF,KAEpExF,QAAQC,WAAWqF,EAAWK,WACvBC,MAAMC,KAAKP,EAAWQ,WAIjC,YAAAC,iBAAA,WACE,IAAIX,EAAU,IAAI,IAAM,IAAW7E,UAAW,IAC9CT,KAAKnB,4BAAuBqH,SAASZ,GACrCtF,KAAK8C,UAAY,IAGnB,YAAAqD,gBAAA,SAAgBC,KAGhB,YAAAC,UAAA,WACErG,KAAKnB,4BACFuB,gBAAgBkG,e,sCAlGVC,GAAc,gC,uBAAdA,EAAc,meDf3B,gBACE,gBACE,gBACE,gBAAuB,+BAAoB,OAC3C,mBAAoB,+BAAS,EAAAN,qBAAqB,sBAAU,OAC5D,gBAAwB,QAAmC,OAC7D,OAEA,sBAKF,OACF,OAEA,2B,MAX8B,0EAGQ,mEAQI,qE,u2CCN1C,GCLA,aAIE,WAAoBnH,GAAA,KAAAA,O,OAEpB,YAAA0H,YAAA,SAAY3B,GACV,OAAO7E,KAAKlB,KAAK6B,IAAI,uBAGvB,YAAA8F,yBAAA,WACE,OAAOzG,KAAKlB,KAAK6B,IAAI,sCAGvB,YAAA+F,kBAAA,SAAkBC,GAChB,OAAO3G,KAAKlB,KAAK6B,IAAI,yBAA6BgG,EAAI,MAGxD,YAAAC,WAAA,SAAWlB,GACT,OAAO1F,KAAKlB,KAAKkE,KAAK,gBAAiB0C,I,sCAhB9BmB,GAAY,Y,yBAAZA,EAAY,QAAZA,EAAY,qBAFX,S,EADd,G,yBCWM,iBAME,2BACF,Q,iCAHE,qBAEe,6BAAmB,WChB1C,iBA+BE,WACUC,EACAC,GADA,KAAAD,cACA,KAAAC,wBAER/G,KAAKgH,MAAQ,G,OA1BA,YAAAC,QAAf,SAAuBC,GAAvB,WACE/F,WAAW,WACT,EAAK6F,MAAQE,GACZ,MAGL,sBAAI,mBAAI,C,IAAR,WACE,OAAOlH,KAAKgH,O,IAEd,SAASE,GACPlH,KAAKgH,MAAQE,G,gCAMf,sBAAgB,gBAAC,C,IAAjB,SAAkBA,GAAlB,WACa,IAAPA,IACFlH,KAAKmH,SAAWD,EAChB/F,WAAW,WAAQ,EAAKiG,iBAAiB,EAAKD,c,gCAwBlD,YAAAE,WAAA,sBAGErH,KAAK8G,YAAYL,2BAA2BnG,UAAU,SAACC,GASrDA,EAAI+G,IAAI,SAAC5B,GACP,IAAI6B,EAAQnF,KAAKO,MAAM+C,EAAK,IACxB6B,EAAMC,SAAW,IACnBD,EAAMC,SAAW,EACjB,EAAKR,MAAMhG,KAAKuG,SAQxB,YAAAH,iBAAA,SAAiBT,GAAjB,WACE3G,KAAK8G,YAAYJ,kBAAkBC,GAAGrG,UAAU,SAACwB,GAC/C,EAAKkF,MAAQlF,EAAKA,QAItB,YAAA7B,SAAA,WAGOD,KAAKmH,UACRnH,KAAKqH,cAGT,YAAAhB,UAAA,a,sCApFWoB,GAAiB,oB,uBAAjBA,EAAiB,m1BDX9B,gBACE,gBACE,mBAAoB,cAAG,OACvB,mBAAoB,iBAAM,OAC1B,mBAAoB,oBAAS,OAC/B,OAEA,gBACE,gBACE,iBAAuB,SAA+B,OACtD,iBACE,oBAAyB,gBAAI,OAC7B,oBAAyB,kBAAM,OACjC,OACF,OACA,iBACE,uBAQA,yBAOE,mBAIE,+BAQF,OACF,OACF,OACF,OACF,Q,MAtC6B,mEASJ,kC,6hCCZzB,GC0BMC,EAAe,IAAaC,SArBX,CACrB,CACEC,KAAM,GACNC,UAAW,OACXC,UCXJ,WASE,WACU/I,GADV,WACU,KAAAA,QAFV,KAAAgJ,YAAc,GAIZ/H,KAAKjB,MAAMiJ,OAAO1H,UAAU,SAAC0H,GAC3B9H,QAAQC,IAAI6H,GACRA,EAAOC,SACT,EAAKF,YAAcC,EAAOC,U,OAMhC,YAAAhI,SAAA,a,sCAfWiI,GAAa,Y,uBAAbA,EAAa,uJCV1B,gBACE,eACA,sBACF,Q,MADa,kC,qqCDEb,IDcE,CACEN,KAAM,OACNC,UAAW,OACXC,UAAW,GAGb,CACEF,KAAM,UACNC,UAAW,OACXC,UAAW,KAQf,2B,8BAgBaK,I,oDAAAA,IAAY,SAVd,CACP,IACAT,EACA,IACA,IACA,Q,EAXJ","file":"6.d440f0c4a9bbbc8c85c2.js","sourcesContent":["export const PAYMENT_TYPE_RESPONCE = {\r\n    CARD: {\r\n\r\n        card_cvv: \"123\",\r\n        card_expiryMonth: \"04\",\r\n        card_expiryYear: \"2023\",\r\n        card_holder: \"a\",\r\n        card_number: \"4444333322221111\",\r\n        paymentOption: \"card\",\r\n\r\n    },\r\n\r\n    upi: {\r\n\r\n        upi_vpa: \"\",\r\n        upi: { vpa: \"apurbamandal0@oksbi\" },\r\n        paymentOption: \"upi\",\r\n    },\r\n\r\n    netBanking: {},\r\n    walet: {},\r\n}","<!-- <p>payment works!</p> -->\r\n<br />\r\n\r\n<div class=\"main\" [hidden]=\"_setDisplayMode\">\r\n  <div class=\"content\">\r\n    <div class=\"preloader\" [hidden]=\"!isloading()\"></div>\r\n    payment works ....... are goes the call bal url and the paymet success\r\n    screen. if needed remove loader.\r\n  </div>\r\n</div>\r\n{{ _setDisplayMode }}\r\n<div class=\"payment-card\" [hidden]=\"!_setDisplayMode\">\r\n  <div class=\"floating-paymentform\">\r\n    <form id=\"seamlessBasic\" style=\"position: relative\">\r\n      <table class=\"mainForm\">\r\n        <tr>\r\n          <td>order id</td>\r\n          <td><input type=\"text\" name=\"orderId\" [ngModel]=\"orderId\" /></td>\r\n        </tr>\r\n        <tr>\r\n          <td>order amount</td>\r\n          <td>\r\n            <input type=\"text\" name=\"orderAmount\" value=\"0\" [ngModel]=\"currentOrderDetail?.totalAmountAfterDiscount\" />\r\n          </td>\r\n        </tr>\r\n        <tr>\r\n          <td>customer name</td>\r\n          <td><input type=\"text\" name=\"customerName\" value=\"payments\" /></td>\r\n        </tr>\r\n        <tr>\r\n          <td>customer email</td>\r\n          <td>\r\n            <input type=\"text\" name=\"customerEmail\" value=\"payment@societystore.co\" />\r\n          </td>\r\n        </tr>\r\n        <tr>\r\n          <td>customer phone</td>\r\n          <td><input type=\"text\" name=\"customerPhone\" value=\"1234512345\" /></td>\r\n        </tr>\r\n      </table>\r\n      <div id=\"resultDiv\"></div>\r\n\r\n\r\n      <table>\r\n        <tr [hidden]=\"orderId == null\">\r\n          <!-- card -->\r\n          <div class=\"container\">\r\n            <form>\r\n              <div class=\"row card-form\" *ngIf=\"payMode=='card'\">\r\n                <div class=\"col-50\">\r\n                  <h3>Payment</h3>\r\n                  <label for=\"fname\">Accepted Cards</label>\r\n                  <div class=\"icon-container\">\r\n                    <i class=\"fa fa-cc-visa\" style=\"color: navy\"></i>\r\n                    <i class=\"fa fa-cc-amex\" style=\"color: blue\"></i>\r\n                    <i class=\"fa fa-cc-mastercard\" style=\"color: red\"></i>\r\n                    <i class=\"fa fa-cc-discover\" style=\"color: orange\"></i>\r\n                  </div>\r\n                  <label for=\"cname\">Name on Card</label>\r\n                  <input type=\"text\" id=\"cname\" name=\"cardname\" placeholder=\"John More Doe\" />\r\n                  <label for=\"ccnum\">Credit card number</label>\r\n                  <input type=\"text\" id=\"ccnum\" name=\"cardnumber\" placeholder=\"1111-2222-3333-4444\" />\r\n                  <label for=\"expmonth\">Exp Month</label>\r\n                  <input type=\"text\" id=\"expmonth\" name=\"expmonth\" placeholder=\"September\" />\r\n                  <div class=\"cvv-row\">\r\n                    <div class=\"grid-row\">\r\n                      <label for=\"expyear\">Exp Year</label>\r\n                      <input type=\"text\" id=\"expyear\" name=\"expyear\" placeholder=\"2018\" />\r\n                    </div>\r\n                    <div class=\"grid-row\">\r\n                      <label for=\"cvv\">CVV</label>\r\n                      <input type=\"text\" id=\"cvv\" name=\"cvv\" placeholder=\"352\" />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"upi-form\" *ngIf=\"payMode=='upi'\">\r\n                <label for=\"cname\" *ngIf=\"upiValid !=='red'\">Pay By </label>\r\n                <label for=\"cname\" *ngIf=\"upiValid =='red'\">Enter Valid UPI Address </label>\r\n                <input type=\"text\" placeholder=\"UPI Address\" [ngClass]=\"upiValid=='red'?'red':''\" [formControl]=\"upiAddress\" />\r\n              </div>\r\n              <div class=\"netb-form\">\r\n                <select type=\"text\" id=\"nb\" name=\"nb\" *ngIf=\"payMode=='nb'\" class=\"nb-dropdown\" placeholder=\"Bank\">\r\n                  <option>\r\n                    SBI (India)\r\n                  </option>\r\n                  <option>HDFC\r\n                  </option>\r\n                </select>\r\n              </div> <!-- <input type=\"submit\" value=\"Continue to checkout\" class=\"btn\" /> -->\r\n            </form>\r\n          </div>\r\n        </tr>\r\n\r\n\r\n        <div class=\"radioBttns\" [hidden]=\"orderId == null\">\r\n          <tr>\r\n            <td>\r\n              <input class=\"btn\" class=\"paymentRadioInput\" type=\"radio\" id=\"upi\" checked name=\"paymentOption\" value=\"upi\" />\r\n              <div class=\"btn\" disabled for=\"upi\" (click)=\"changePaymentMode('upi')\">\r\n                upi\r\n              </div>\r\n            </td>\r\n            <td>\r\n              <input class=\"btn\" class=\"paymentRadioInput\" type=\"radio\" id=\"card\" name=\"paymentOption\" value=\"card\" />\r\n              <div class=\"btn\" for=\"card\" (click)=\"changePaymentMode('card')\">\r\n                card\r\n              </div>\r\n            </td>\r\n            <!-- <td>\r\n              <input class=\"btn\" class=\"paymentRadioInput\" type=\"radio\" id=\"nb\" name=\"paymentOption\" value=\"nb\" />\r\n              <div class=\"btn\" for=\"netBanking\" (click)=\"changePaymentMode('nb')\">\r\n                net banking\r\n              </div>\r\n            </td> -->\r\n          </tr>\r\n        </div>\r\n\r\n\r\n        <tr>\r\n\r\n          <div class=\"action-btns\">\r\n            <p>\r\n              Total Bill : {{currentOrderDetail?.totalAmountAfterDiscount}}\r\n            </p>\r\n            <!-- <button class=\"btn action\" routerLink=\"/payment\">Cancle</button> -->\r\n            <button class=\"btn action\" [disabled]=\"isOrderCreating\" [hidden]=\"enablePayment\" (click)=\"createOrderAndToPayment()\">\r\n              {{ !isOrderCreating ? \"Order Now\" : \"....\" }}\r\n            </button>\r\n            <!-- <button class=\"btn action\" routerLink=\"/\" style=\" margin: 17px 6px;\" [hidden]=\"!enablePayment\">\r\n              Cancle\r\n            </button> -->\r\n            <button [hidden]=\"!enablePayment\" class=\"btn action\" (click)=\"processPayment()\">\r\n              <img *ngIf=\"paymentProcessiong\" src=\"../../../../assets/images/payment.gif\" style=\"width: 48px;\">\r\n              <span *ngIf=\"!paymentProcessiong\">PayNow</span>\r\n            </button>\r\n          </div>\r\n        </tr>\r\n\r\n\r\n      </table>\r\n\r\n\r\n    </form>\r\n  </div>\r\n</div>\r\n<iframe class=\"paypent-screen\" *ngIf=\"showiframeScreen\" [src]=\"paymentHash\"></iframe>","import { HttpClient } from \"@angular/common/http\";\r\nimport { Component, Input, OnInit } from \"@angular/core\";\r\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\r\nimport { DomSanitizer } from \"@angular/platform-browser\";\r\nimport { Router } from \"@angular/router\";\r\nimport { State, StateNames } from \"src/app/schemas/componentStateSchema\";\r\nimport { ItemSchema, retriveItemFromLocalStore } from \"src/app/schemas/ItemSchema\";\r\nimport { PAYMENT_TYPE_RESPONCE } from \"src/app/schemas/paymentResponce\";\r\nimport { ComponentStateService } from \"src/app/services/component-state.service\";\r\n\r\nexport enum paymentComponentMode {\r\n  buttonOnly = 0,\r\n  fullPage = 1,\r\n}\r\n\r\nexport enum cashFreeSDKEventEnums { paymentRequest = \"PAYMENT_REQUEST\", paymentResponse = \"PAYMENT_RESPONSE\" }\r\n\r\n\r\n\r\n\r\n\r\n@Component({\r\n  selector: \"payment\",\r\n  templateUrl: \"./payment.component.html\",\r\n  styleUrls: [\"./payment.component.css\"],\r\n  providers: [\r\n    { provide: Window, useValue: window }\r\n  ]\r\n})\r\nexport class PaymentComponent implements OnInit {\r\n  loading: boolean = true;\r\n\r\n  dummylist: ItemSchema[];\r\n  state: any;\r\n  addToCartState: string = \"addToCart\";\r\n  orderId: any = null;\r\n\r\n  orderCreationFailed = true;\r\n\r\n  isOrderCreating = false;\r\n\r\n  enablePayment = false;\r\n\r\n  payMode: any;\r\n\r\n  currentOrderDetail: any;\r\n\r\n  totalAmount\r\n\r\n  showiframeScreen: boolean = false;\r\n\r\n  paymentHash: any;\r\n  // _setDisplayMode = 0;\r\n\r\n  componentMode = paymentComponentMode.fullPage;\r\n  upiAddress = new FormControl(\"\");\r\n\r\n  paymentProcessiong = false;\r\n  upiValid = '';\r\n  @Input(\"setDisplayMode\") _setDisplayMode = 0;\r\n\r\n  isloading() {\r\n    return this.loading;\r\n  }\r\n  constructor(\r\n    private componentÌ¥StateService: ComponentStateService,\r\n    private http: HttpClient,\r\n    private route: Router,\r\n    private sanitizer: DomSanitizer,\r\n    private window: Window\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    // this.loadPaymentRelatedJs();\r\n    console.log(this._setDisplayMode);\r\n\r\n    // this.createItemForm = new FormGroup({\r\n    //   name: new FormControl(\"\", [Validators.required]),\r\n    //   discp: new FormControl(\"\", [Validators.required]),\r\n    //   price: new FormControl(\"\", [Validators.required]),\r\n    //   brand: new FormControl(\"\", [Validators.required]),\r\n    //   varient: new FormControl(\"\", [Validators.required]),\r\n    //   image: new FormControl(\"\", [Validators.required]),\r\n    // });\r\n\r\n\r\n    this.componentÌ¥StateService\r\n      .onStateChange(StateNames.OpenSearchBoxState)\r\n      .subscribe((res) => {\r\n\r\n        if (res.id === StateNames.addToCart) {\r\n          let userCart = res.value.get(StateNames.addToCart);\r\n          console.log('cart changed.');\r\n          let cartItems = new Map(retriveItemFromLocalStore(\"cartValue\"));\r\n          this.state = { value: [] };\r\n          cartItems.forEach((value: any, key) => {\r\n            this.state.value.push(value);\r\n          });\r\n        }\r\n\r\n      });\r\n    let cartItems = new Map(retriveItemFromLocalStore(\"cartValue\"));\r\n    this.state = { value: [] };\r\n    cartItems.forEach((value: any, key) => {\r\n      this.state.value.push(value);\r\n    });\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    setTimeout(() => {\r\n      this.loading = false;\r\n      console.log(this.loading);\r\n    }, 500);\r\n  }\r\n\r\n  ngDoCheck() {\r\n    // this.   = this.retriveItemFromLocalStore();\r\n    // this.state = this.componentÌ¥StateService.getStateByStateName(\r\n    //   this.addToCartState\r\n    // ) as State;\r\n    // this.dummylist = this.state\r\n    //   ? this.state.value\r\n    //   : this.retriveItemFromLocalStore(\"cartValue\");\r\n\r\n    // this.componentMode = this._setDisplayMode;\r\n  }\r\n\r\n\r\n\r\n  initiateCashfree() {\r\n    var config = { layout: {}, checkout: {}, mode: \"TEST\" };\r\n    config.layout = { view: \"popup\", width: \"650\" };\r\n    // config.layout = {};\r\n    config.checkout = \"transparent\";\r\n    config.mode = \"PROD\"; //use PROD when you go live\r\n    this.window['CashFree'].init(config);\r\n  }\r\n\r\n  handleResponse(data) {\r\n    console.log(data);\r\n  }\r\n\r\n  callback(event) {\r\n    //sample callback to see what response is received\r\n    console.log(\"call back passed to sdk called\");\r\n    console.log(\"event:\", event);\r\n\r\n    switch (event.name) {\r\n      case cashFreeSDKEventEnums.paymentRequest: {\r\n        console.log(\"payment request enum hit\");\r\n        console.log(\"event:\", event);\r\n        //do error reporting here\r\n        //.....\r\n        //unfreeze form\r\n        // this.displayResult(event.status, event.message);\r\n        console.log(\"event:\", event);\r\n        break;\r\n      }\r\n      case cashFreeSDKEventEnums.paymentResponse: {\r\n        //capture response and send to server\r\n        console.log(\"payment response enum hit\");\r\n        console.log(\"event:\", event);\r\n        const { response } = event;\r\n        this.handleResponse(JSON.stringify(response));\r\n        break;\r\n      }\r\n      default: {\r\n        console.log(\"other event caught\");\r\n        console.log(\"event:\", event);\r\n      }\r\n    }\r\n  }\r\n\r\n  retriveItemFromLocalStore(id): any[] {\r\n    let lastValue = localStorage.getItem(id);\r\n    if (lastValue && lastValue.length > 0) {\r\n      try {\r\n        return JSON.parse(localStorage.getItem(id));\r\n      } catch (e) {\r\n        console.error(\"JSon parse failed\");\r\n        return this.dummylist;\r\n      }\r\n    }\r\n    return this.dummylist;\r\n  }\r\n  createOrderAndToPayment() {\r\n    this.isOrderCreating = true;\r\n\r\n    // let cartValue =\r\n\r\n    this.http.post(\"/api/orders/create\", { items: this.state.value }).subscribe(\r\n      (res: any) => {\r\n        console.log({ \"order created......\": res });\r\n        this.isOrderCreating = false;\r\n        this.orderId = res.respos._id;\r\n        this.enablePayment = true;\r\n        this.orderCreationFailed = false;\r\n        this.currentOrderDetail = res.respos;\r\n\r\n      },\r\n      (err) => {\r\n        this.isOrderCreating = false;\r\n        this.orderCreationFailed = true;\r\n        this.orderId = 1;\r\n        this.enablePayment = false;\r\n      }\r\n    );\r\n  }\r\n\r\n  paymentRedirection(orderDetail) {\r\n    // this.route.navigate([\"/payment\"]);\r\n\r\n    //this creates the order and creata  a payment token can be for to redirect to PG page.store that to session #ToDO\r\n\r\n    let newOrderDetail = {\r\n      orderId: orderDetail.order._id,\r\n      orderAmount: 1,\r\n      customerName: orderDetail.order.user.profile.name,\r\n      customerEmail: \"a@a.com\",\r\n      customerPhone: \"1234512345\",\r\n    };\r\n    this.http\r\n      .post(\r\n        \"https://us-central1-societystore.cloudfunctions.net/moduleExports/calculateSecretKey.\",\r\n        {\r\n          formObj: newOrderDetail,\r\n          paymentType: \"SEAMLESSBASIC\",\r\n        }\r\n      )\r\n      .subscribe((res: any) => {\r\n        console.log({ ...res.additionalFields, ...newOrderDetail, ...orderDetail.paymentDetail });\r\n        let paymentData = {\r\n          ...res.additionalFields,\r\n          ...newOrderDetail,\r\n          ...orderDetail.paymentDetail,\r\n          // returnUrl: \"https://us-central1-societystore.cloudfunctions.net/moduleExports/seamlessBasic/result\",\r\n          // returnUrl: \"http://localhost:4300/api/orders/payment/responce\",\r\n          returnUrl: \"https://societystore.co/api/orders/payment/responce\",\r\n          notifyUrl: \"https://societystore.co/api/orders/payment/responce\",\r\n          source: \"web_societystore\",\r\n        };\r\n        // this.redirectToCashFree({\r\n        //   ...res.additionalFields,\r\n        //   ...newOrderDetail,\r\n        //   ...orderDetail.paymentDetail,\r\n        //   source: \"web_societystore\",\r\n        // });\r\n\r\n        try {\r\n          this.initiateCashfree();\r\n          this.window['CashFree'].paySeamless(paymentData, this.callback);\r\n        } catch (e) {\r\n          console.log(e);\r\n        }\r\n\r\n\r\n      });\r\n  }\r\n\r\n  redirectToCashFree(data) {\r\n    this.http\r\n      .post(\r\n        \"https://www.cashfree.com/checkout/post/generate-paymenthash\",\r\n        { ...data }\r\n      )\r\n      .subscribe((res: any) => {\r\n        if (res.status == \"OK\") {\r\n          // let paymentUrl = \"https://www.cashfree.com/checkout/post/payment/\" + res.paymentHash;\r\n          // this.paymentHash = this.sanitizer.bypassSecurityTrustResourceUrl(paymentUrl);\r\n          // console.log(this.paymentHash);\r\n          // this.showiframeScreen = true;\r\n        }\r\n      });\r\n  }\r\n\r\n  changePaymentMode(id): any {\r\n    console.log(\"opening form ....\");\r\n    this.payMode = id;\r\n    try {\r\n      // let _paymentMode = window[\"paymentOptions\"];\r\n\r\n      // console.log({ id, _paymentMode });\r\n\r\n      // if (id === \"walet\") {\r\n      //   console.log(\"something else\");\r\n      //   return;\r\n      // }\r\n      // window[\"displayFormElement\"](_paymentMode[id]);\r\n\r\n\r\n\r\n    } catch (e) {\r\n      console.log(\"payment script not. loaded\");\r\n    }\r\n  }\r\n\r\n  processPayment() {\r\n    this.paymentProcessiong = true;\r\n\r\n    let payload = { order: this.currentOrderDetail, paymentDetail: {} }\r\n    switch (this.payMode) {\r\n      case \"upi\": {\r\n        // payload.paymentDetail =\r\n        payload.paymentDetail = PAYMENT_TYPE_RESPONCE.upi;\r\n        payload.paymentDetail['upi'].vpa = this.upiAddress.value;\r\n        payload.paymentDetail['upi_vpa'] = this.upiAddress.value;\r\n        this.http.post(\"/api/orders/validate\", payload.paymentDetail).subscribe((res: any) => {\r\n          // console.log(res);\r\n          if (res.status == \"OK\" && res.valid == true) {\r\n            this.upiValid = 'green';\r\n            this.paymentRedirection(payload);\r\n          } else {\r\n            this.upiValid = 'red';\r\n            this.paymentProcessiong = false;\r\n            return;\r\n          }\r\n\r\n        })\r\n        return;\r\n      }\r\n      case \"card\": {\r\n        payload.paymentDetail = PAYMENT_TYPE_RESPONCE.CARD;\r\n        break;\r\n      }\r\n      case \"nb\": {\r\n        payload.paymentDetail = PAYMENT_TYPE_RESPONCE.netBanking;\r\n        break;\r\n      }\r\n      default: return;\r\n    }\r\n    // console.log(payload);\r\n    this.paymentRedirection(payload);\r\n  }\r\n}\r\n","<div class=\"main-container\">\n  <div class=\"item-list\">\n    <div class=\"flex-action-container\">\n      <div class=\"flex-left\">Group items ( Cart )</div>\n      <button class=\"btn\" (click)=\"clearCurrentCart()\"> Clear Cart</button>\n      <div class=\"flex-right\">{{ dummylist?.length }} items found</div>\n    </div>\n    \n    <div class=\"flex-list-container\" *ngIf=\"dummylist?.length > 0\">\n      <div class=\"list-item\" *ngFor=\"let item of dummylist\">\n        <items-in-list [item]=\"item\" [addMore]=\"true\">1</items-in-list>\n      </div>\n    </div>\n  </div>\n</div>\n\n<footer class=\"nav-footer-main checkout\" *ngIf=\"dummylist?.length > 0\">\n  <div class=\"footer-nav checkout\">\n    <div class=\"menu\">\n      <payment [setDisplayMode]=1 ></payment>\n    </div>\n  </div>\n</footer>\n","import { HttpClient } from \"@angular/common/http\";\nimport { ArrayType } from \"@angular/compiler\";\nimport { Component, OnInit } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { State, StateNames } from \"src/app/schemas/componentStateSchema\";\nimport { ItemSchema, retriveItemFromLocalStore } from \"src/app/schemas/ItemSchema\";\nimport { ComponentStateService } from \"src/app/services/component-state.service\";\n\n\n\n@Component({\n  selector: \"app-chart\",\n  templateUrl: \"./chart.component.html\",\n  styleUrls: [\"./chart.component.css\"],\n})\nexport class ChartComponent implements OnInit {\n  dummylist: ItemSchema[];\n  state: any;\n  addToCartState: string = \"addToCart\";\n\n  constructor(\n    private componentÌ¥StateService: ComponentStateService,\n    private http: HttpClient,\n    private route: Router\n  ) {\n    this.dummylist = [];\n  }\n\n  ngAfterViewInit() {\n    // this.dummylist = this.retriveItemFromLocalStore();\n  }\n\n  ngOnInit() {\n    this.dummylist = [];\n\n    this.componentÌ¥StateService\n      .onStateChange(StateNames.OpenSearchBoxState)\n      .subscribe((res) => {\n\n        if (res.id === StateNames.addToCart) {\n          let userCart = res.value.get(StateNames.addToCart);\n          // this.loggedInUserDetails = userDetail.value.user;\n          // this.dummylist = userCart.value || retriveItemFromLocalStore(\"cartValue\");\n          console.log('cart changed.');\n          let cartItems = new Map(retriveItemFromLocalStore(\"cartValue\"));\n          this.dummylist = [];\n          cartItems.forEach((value: any, key) => {\n            this.dummylist.push(value);\n          });\n        }\n\n\n      });\n\n    // this.dummylist = || [];\n    let cartItems = new Map(retriveItemFromLocalStore(\"cartValue\"));\n    cartItems.forEach((value: any, key) => {\n      this.dummylist.push(value);\n    });\n\n\n\n  }\n  ngDoCheck() {\n    // this.dummylist = this.retriveItemFromLocalStore();\n    // this.state = this.componentÌ¥StateService.getStateByStateName(\n    //   this.addToCartState\n    // ) as State;\n    // try {\n    //   this.dummylist = this.state\n    //     ? this.state.value\n    //     : this.retriveItemFromLocalStore(\"cartValue\");\n    // } catch (e) {\n    //   console.error(\"JSon parse failed\");\n    //   this.dummylist = [];\n    // }\n  }\n\n\n  mergeCartValue(oldCart, newCart, coppyAll?: true): any[] {\n    let oldCartMap = new Map<number, any>();\n    let newCartMap = new Map<number, any>();\n    let mergeCart = [];\n    // if (oldCart.length > newCart.length) {\n\n    // }\n    // else {\n\n    // }\n\n    if (coppyAll) {\n      oldCart.forEach((item: ItemSchema) => {\n        newCartMap.set(item.itemCode, item);\n      });\n      newCart.forEach((item: ItemSchema) => {\n        if (!oldCartMap.get(item.itemCode)) oldCartMap.set(item.itemCode, item);\n      });\n      console.log(typeof oldCartMap.entries());\n      return Array.from(oldCartMap.values());\n    }\n  }\n\n  clearCurrentCart() {\n    let newCart = new State(StateNames.addToCart, []);\n    this.componentÌ¥StateService.setState(newCart);\n    this.dummylist = [];\n  }\n\n  initiatePayment(orderDetails) { }\n\n\n  ngDestroy() {\n    this.componentÌ¥StateService\n      .onStateChange().unsubscribe();\n  }\n}\n\n","import { HttpClient } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { Observable } from \"rxjs\";\nimport { ItemSchema } from \"../schemas/ItemSchema\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class ItemsService {\n  constructor(private http: HttpClient) {}\n\n  getAllItems(payload): Observable<any> {\n    return this.http.get(\"/api/products/list\");\n  }\n\n  getinventoryFrommerchant(): Observable<any> {\n    return this.http.get(\"/api/products/merchantProductlist\");\n  }\n\n  fetchsearchResult(Q): Observable<any> {\n    return this.http.get((\"/api/search/ac?ed=3&q=\") + Q + \"&\");\n  }\n\n  addNewItem(item: ItemSchema) {\n    return this.http.post(\"/api/products\", item);\n  }\n}\n","<div class=\"main-container\">\n  <div class=\"top-quick-search\">\n    <button class=\"btn\">All</button>\n    <button class=\"btn\">Makeup</button>\n    <button class=\"btn\">Skin Care</button>\n  </div>\n\n  <div class=\"item-list\">\n    <div class=\"flex-action-container\">\n      <div class=\"flex-left\">{{ _list?.length }} items found</div>\n      <div class=\"flex-right\">\n        <button class=\"btn actn\">Sort</button>\n        <button class=\"btn actn\">Filter</button>\n      </div>\n    </div>\n    <div class=\"flex-list-container\">\n      <div\n        class=\"list-item\"\n        *ngFor=\"let item of _list; let id = index\"\n        asd=\"index\"\n        id=\"{{ 'ptem_' + id }}\"\n      >\n        <items-in-list [id]=\"'item_' + id\" [item]=\"item\"></items-in-list>\n      </div>\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width=\"50\"\n        height=\"50\"\n        viewBox=\"0 0 50 50\"\n        style=\"margin: 26px 38%\"\n      >\n        <path\n          fill=\"#d8c93d\"\n          d=\"M25,5A20.14,20.14,0,0,1,45,22.88a2.51,2.51,0,0,0,2.49,2.26h0A2.52,2.52,0,0,0,50,22.33a25.14,25.14,0,0,0-50,0,2.52,2.52,0,0,0,2.5,2.81h0A2.51,2.51,0,0,0,5,22.88,20.14,20.14,0,0,1,25,5Z\"\n        >\n          <animateTransform\n            attributeName=\"transform\"\n            type=\"rotate\"\n            from=\"0 25 25\"\n            to=\"360 25 25\"\n            dur=\"0.5s\"\n            repeatCount=\"indefinite\"\n          />\n        </path>\n      </svg>\n    </div>\n  </div>\n</div>\n","import { Component, Input, OnInit } from \"@angular/core\";\nimport { State, StateNames } from \"src/app/schemas/componentStateSchema\";\nimport { ItemSchema } from \"src/app/schemas/ItemSchema\";\nimport { ComponentStateService } from \"src/app/services/component-state.service\";\nimport { ItemsService } from \"src/app/services/items.service\";\n\n@Component({\n  selector: \"item-list\",\n  templateUrl: \"./item-list.component.html\",\n  styleUrls: [\"./item-list.component.css\"],\n})\nexport class ItemListComponent implements OnInit {\n  dummylist: ItemSchema[];\n  _list: any[];\n\n  @Input(\"list\") setlist(val) {\n    setTimeout(() => {\n      this._list = val;\n    }, 700);\n  }\n\n  get list() {\n    return this._list;\n  }\n  set list(val) {\n    this._list = val;\n  }\n\n\n  _searchQ: string;\n\n  @Input(\"Q\") set Q(val) {\n    if (val != \"\") {\n      this._searchQ = val;\n      setTimeout(() => { this.loadSearchResult(this._searchQ); });\n    }\n  }\n  constructor(\n    private itemService: ItemsService,\n    private componentStateService: ComponentStateService\n  ) {\n    this._list = [];\n    // this._searchQ = \"\";\n    // this._list.push(\n    //   new ItemSchema({\n    //     name: \"\",\n    //     price: \"\" /*  { new: 9000, old: 12000 } */,\n    //     discp: \"\",\n    //     varients: \"\" /* [\"RO\", \"Ro + UV \"] */,\n    //     rating: \"\" /*  { value: \"4.2\", totalCount: \"200\" }, */,\n    //     image:\n    //       \"\" /* \"https://www.bigbasket.com/media/uploads/p/m/40018854_4-himalaya-purifying-neem-face-wash.jpg\", */,\n    //     brand: \"\",\n\n    //   })\n    // );\n  }\n\n  getAllItem() {\n\n    //// this has to be paginated ...... based on the query pararms ....\n    this.itemService.getinventoryFrommerchant().subscribe((res) => {\n      // for each current list update the quantatio for the referance of the user ..\n\n      // just change the current lis details\n\n      // const items: State = this.componentStateService.getStateByStateName(\n      //   StateNames.addToCart\n      // ) as State;\n\n      res.map((item: any) => {\n        let itemC = JSON.parse(item[1]);\n        if (itemC.quantity > 0) {\n          itemC.quantity = 0;\n          this._list.push(itemC);\n        }\n      })\n\n    });\n  }\n\n\n  loadSearchResult(Q: string) {\n    this.itemService.fetchsearchResult(Q).subscribe((data) => {\n      this._list = data.data;\n    })\n  }\n\n  ngOnInit() {\n\n    // console.log(this._searchQ);\n    if (!this._searchQ)\n      this.getAllItem();\n  }\n\n  ngDestroy() {\n    // this.componentStateService.\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule, Routes } from '@angular/router';\nimport { SharedModule } from 'src/app/sharedModule/shared/shared.module';\nimport { ChartComponent } from './chart/chart.component';\nimport { FeedComponent } from './feed/feed.component';\nimport { PaymentComponent } from 'src/app/sharedModule/shared/payment/payment.component';\nimport { SubscribeMerchantComponent } from './subscribe-merchant/subscribe-merchant.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\n\nconst routes: Routes = [\n  {\n    path: \"\",\n    pathMatch: \"full\",\n    component: FeedComponent,\n\n  },\n  {\n    path: \"cart\",\n    pathMatch: \"full\",\n    component: ChartComponent,\n\n  },\n  {\n    path: \"payment\",\n    pathMatch: \"full\",\n    component: PaymentComponent,\n\n  }\n\n];\nconst clientRoutes = RouterModule.forChild(routes);\n\n\n@NgModule({\n  declarations: [\n    FeedComponent,\n    ChartComponent,\n    SubscribeMerchantComponent\n  ],\n  imports: [\n    CommonModule,\n    clientRoutes,\n    SharedModule,\n    FormsModule,\n    ReactiveFormsModule,\n\n  ]\n})\n\nexport class ClientModule { }\n","import { Route } from '@angular/compiler/src/core';\nimport { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n@Component({\n  selector: 'app-feed',\n  templateUrl: './feed.component.html',\n  styleUrls: ['./feed.component.css'],\n\n})\nexport class FeedComponent implements OnInit {\n\n  searchListQ = \"\";\n  constructor(\n    private route: ActivatedRoute\n  ) {\n    this.route.params.subscribe((params) => {\n      console.log(params);\n      if (params.search) {\n        this.searchListQ = params.search;\n      }\n    });\n\n  }\n\n  ngOnInit() {\n\n  }\n\n\n\n}\n","<div class=\"container  no-padding padding-top  \">\n  <hr class=\"vertical-spacer\">\n  <item-list [Q]=\"searchListQ\"></item-list>\n</div>"],"sourceRoot":"webpack:///"}