{"version":3,"sources":["./src/app/shared/services/auth-guard/auth-guard.service.ts","./src/app/merchantModule/merchant/merchant-home/merchant-home.component.html","./src/app/merchantModule/merchant/merchant-home/merchant-home.component.ts","./src/app/merchantModule/merchant/merchant-orders/merchant-orders.component.html","./src/app/merchantModule/merchant/merchant-orders/merchant-orders.component.ts","./src/app/components/calculator/calculator.component.html","./src/app/components/calculator/calculator.component.ts","./src/app/merchantModule/merchant/merchant.module.ts","./src/app/merchantModule/merchant/merchant-pending-payment/merchant-pending-payment.component.ts","./src/app/merchantModule/merchant/merchant-pending-payment/merchant-pending-payment.component.html","./src/app/merchantModule/merchant/merchant-today-total/merchant-today-total.component.ts","./src/app/merchantModule/merchant/merchant-today-total/merchant-today-total.component.html"],"names":["_router","userDetail","canActivate","next","state","console","log","this","url","getCurrentUserStatic","undefined","AuthGuardService","http","hideOverLay","isSubmited","ngOnInit","populateItemList","data","_list","hideOverlay","event","openConfirmation","item","newInventoryItem","inventoryForm","quantity","required","pricePerQuantity","price","new","valueChanges","subscribe","res","addToInvontory","get","value","parseInt","post","prevent","stopPropagation","numSequence","n","inc","nn","i","push","MerchantHomeComponent","routes","path","pathMatch","component","orders","orderItems","showOverlay","getMyOrders","order","deliveryorder","MerchantOrdersComponent","MerchantPendingPaymentComponent","MerchantTodayTotalComponent","window","searchResult","upiSelected","isloaded","payMod","newOrder","upi","amount","loadScript","body","document","script","createElement","innerHTML","src","async","defer","appendChild","ngAfterViewInit","total","nativeElement","e","upiList","selectedUpi","createWpLink","open","_id","substring","length","isloading","changePaymentMode","mode","CalculatorComponent","Window","provide","useValue","MerchantModule","forChild"],"mappings":"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","file":"7.2d5daaed26b48271e459.js","sourcesContent":["import { Injectable } from \"@angular/core\";\nimport {\n  CanActivate,\n  Router,\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot,\n} from \"@angular/router\";\nimport { Observable } from \"rxjs\";\nimport { UserService } from \"../user.service\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class AuthGuardService implements CanActivate {\n  constructor(private _router: Router, private userDetail: UserService) {}\n\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean> | boolean {\n    console.log(\"user static\" + this._router.url);\n\n    // console.log()\n    console.log(this.userDetail.getCurrentUserStatic());\n    if (this.userDetail.getCurrentUserStatic() == undefined) return false;\n    else if (this.userDetail.getCurrentUserStatic().isMer) {\n      return true;\n    } else return true;\n  }\n}\n","<div class=\"container main-container\">\n  <product-search [isFlat]=\"true\" (searchResult)=\"populateItemList($event)\"></product-search>\n\n  <!-- <item-list [list]=\"_list\"></item-list> -->\n  <div class=\"item-list\">\n    <div class=\"flex-action-container\">\n      <div class=\"flex-left\">{{ _list?.length }} items found</div>\n      <div class=\"flex-right\">\n        <button class=\"btn actn\">Sort</button>\n        <button class=\"btn actn\">Filter</button>\n      </div>\n    </div>\n    <div class=\"grid-container\">\n      <div class=\"grid-item\" *ngFor=\"let item of _list; let id = index\">\n        <items-in-list [id]=\"'item_' + id\" [item]=\"item\" (click)=\"openConfirmation(item)\" [viewOnly]=\"true\">\n        </items-in-list>\n      </div>\n    </div>\n  </div>\n\n  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"50\" height=\"50\" viewBox=\"0 0 50 50\" style=\"margin: 26px 38%;\">\n    <path fill=\"#d8c93d\"\n      d=\"M25,5A20.14,20.14,0,0,1,45,22.88a2.51,2.51,0,0,0,2.49,2.26h0A2.52,2.52,0,0,0,50,22.33a25.14,25.14,0,0,0-50,0,2.52,2.52,0,0,0,2.5,2.81h0A2.51,2.51,0,0,0,5,22.88,20.14,20.14,0,0,1,25,5Z\">\n      <animateTransform attributeName=\"transform\" type=\"rotate\" from=\"0 25 25\" to=\"360 25 25\" dur=\"0.5s\"\n        repeatCount=\"indefinite\" />\n    </path>\n  </svg>\n\n\n</div>\n\n<div class=\"overlay\" (click)=\"hideOverlay($event)\" *ngIf=\"hideOverLay\">\n  <div class=\"Content\" (click)=\"prevent($event)\">\n    <div class=\"modal\">\n      <div class=\"content\">\n        <p style=\"\n            text-align: center;\n            font-size: 1.1em;\n            border-bottom: 1px solid #80802d;\n        \">Add this item to your online stock</p>\n        <div class=\"product-img\">\n          <img data-src=\"{{ newInventoryItem?.image }}\" />\n          <form [formGroup]=\"inventoryForm\" (ngSubmit)=\"addToInvontory()\">\n            <div class=\"input-group\">\n              <label> Quantity</label>\n              <select formControlName=\"quantity\">\n                <option>1</option>\n                <option>2</option>\n                <option>5</option>\n                <option>10</option>\n              </select>\n            </div>\n            <div class=\"input-group\">\n              <label> Price Per item</label>\n              <select formControlName=\"pricePerQuantity\">\n                <option *ngFor=\"let price of numSequence(newInventoryItem?.price?.new, -1)\">\n                  {{ price }}\n                </option>\n                <option selected value=\"{{ newInventoryItem?.price?.new }}\">\n                  {{ newInventoryItem?.price?.new }}\n                </option>\n                <option *ngFor=\"\n                              let price of numSequence(newInventoryItem?.price?.new, 1)\n                            \">\n                  {{ price }}\n                </option>\n              </select>\n            </div>\n            <div class=\"input-group\">\n              <button class=\"btn\" [disabled]=\"isSubmited\">\n                Add To Inventory\n                <img [hidden]=\"!isSubmited\" class=\"tick-icon\"\n                  src=\"https://storage.googleapis.com/societystore.appspot.com/cdn/img/tick.png\">\n              </button>\n            </div>\n          </form>\n        </div>\n\n      </div>\n    </div>\n  </div>\n</div>","import { HttpClient } from \"@angular/common/http\";\nimport { Component, OnInit } from \"@angular/core\";\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport { mainModule } from \"process\";\nimport { ItemSchema } from \"src/app/schemas/ItemSchema\";\n\n@Component({\n  selector: \"app-merchant-home\",\n  templateUrl: \"./merchant-home.component.html\",\n  styleUrls: [\"./merchant-home.component.css\"],\n})\nexport class MerchantHomeComponent implements OnInit {\n  _list: any;\n\n  newInventoryItem: ItemSchema;\n\n  inventoryForm: FormGroup;\n\n  hideOverLay: boolean = false;\n\n  isSubmited: boolean = false;\n\n  constructor(private http: HttpClient) {\n\n  }\n\n  ngOnInit() { }\n\n  populateItemList(data) {\n    this._list = data.data;\n    console.log(this._list);\n  }\n\n  hideOverlay(event) {\n    // event.p\n    this.hideOverLay = false;\n    console.log(event);\n  }\n  openConfirmation(item: ItemSchema) {\n    this.hideOverLay = true;\n    this.newInventoryItem = item;\n    console.log(item)\n    this.inventoryForm = new FormGroup({\n      quantity: new FormControl(\"1\", Validators.required),\n      pricePerQuantity: new FormControl(item.price.new, Validators.required)\n    });\n    this.isSubmited = false;\n\n    this.inventoryForm.valueChanges.subscribe((res) => {\n      this.isSubmited = false;\n    })\n  }\n\n  addToInvontory() {\n    this.isSubmited = true;\n    if (this.inventoryForm.get(\"quantity\").value) {\n      this.newInventoryItem.quantity = parseInt(this.inventoryForm.get(\"quantity\").value);\n      this.newInventoryItem.price.new = this.inventoryForm.get(\"pricePerQuantity\").value;\n      let payLoad: ItemSchema = this.newInventoryItem;\n      // payLoad = this.newInventoryItem;\n\n      this.http.post(\"/api/user/merchant/addToInventory\", payLoad).subscribe((res) => {\n\n      });\n    }\n  }\n\n  prevent(event) {\n    event.stopPropagation();\n  }\n\n\n  numSequence(n: number, inc) {\n    let nn = [];\n    for (let i = 5; i >= 1; --i) {\n      nn.push(n + (i * inc));\n    }\n    return nn;\n  }\n}\n","<h3 class=\"page-heading\">New Orders</h3>\n\n<div class=\"main-container\">\n  <div class=\"container\">\n    <ul class=\"grid-container\">\n      <li class=\"grid-item new-order\" *ngFor=\"let order of orders; let id = index\"\n        (click)=\"openConfirmation(order?.orderItems)\">\n        <img [lazyLoad]=\"'../../../assets/images/order.png'\" *ngIf=\"order.paymentStatus != 2\" />\n        <img [lazyLoad]=\"'../../../assets/images/paid.png'\" *ngIf=\"order.paymentStatus == 2\" />\n        <div>\n          <span>Flat : F1403</span>\n          <p>Name : Apurba Mondal </p>\n          <p>Items : {{order.orderItems.length}} items-in-list</p>\n          <p>Total : ₹{{ order.totalAmount }}</p>\n          <div class=\"order-footer\">\n            <button class=\"btn\" style=\"background-color: #c5c772bd\" (click)=\"prevent($event,{order:order._id})\">\n              Delivered ?\n              <span *ngIf=\"order.orderStatus == 3\"> <img [lazyLoad]=\"'../../../../assets/images/gtick.png'\"></span>\n            </button>\n            <!-- <img src=\"../../../../assets/images/paymentpaid.png\"> -->\n            <!-- <span class=\"btn\">\n              Payment :\n              {{ order.paymentStatus == 2 ? \"Paid\" : \"Not Paid\" }}\n            </span> -->\n          </div>\n        </div>\n      </li>\n    </ul>\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"50\" height=\"50\" viewBox=\"0 0 50 50\" style=\"margin: 26px 38%\">\n      <path fill=\"#d8c93d\"\n        d=\"M25,5A20.14,20.14,0,0,1,45,22.88a2.51,2.51,0,0,0,2.49,2.26h0A2.52,2.52,0,0,0,50,22.33a25.14,25.14,0,0,0-50,0,2.52,2.52,0,0,0,2.5,2.81h0A2.51,2.51,0,0,0,5,22.88,20.14,20.14,0,0,1,25,5Z\">\n        <animateTransform attributeName=\"transform\" type=\"rotate\" from=\"0 25 25\" to=\"360 25 25\" dur=\"0.5s\"\n          repeatCount=\"indefinite\" />\n      </path>\n    </svg>\n  </div>\n</div>\n<div class=\"overlay\" (click)=\"hideOverlay($event)\" *ngIf=\"showOverlay\">\n  <div class=\"content\" (click)=\"prevent($event)\">\n    <div class=\"modal\">\n      <!-- <div  > -->\n      <!-- <items-in-list class=\"content\" *ngFor=\"let items of orderItems\" [item]=\"items\" [disabled]=\"true\"></items-in-list> -->\n      <!-- </div> -->\n      <div class=\"grid-item-container\">\n        <div class=\"grid-items\" *ngFor=\"let item of orderItems; let id = index\">\n          <items-in-list [id]=\"'item_' + id\" [item]=\"item\" (click)=\"openConfirmation(item)\" [viewOnly]=\"true\">\n          </items-in-list>\n          <span style=\"font-size: 22px;margin-right: 16px;margin-top: 5px;\">x</span>\n          <p>{{item?.quantity}}</p>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>","import { HttpClient } from '@angular/common/http';\nimport { Component, OnInit } from '@angular/core';\nimport { ItemSchema } from 'src/app/schemas/ItemSchema';\n\n@Component({\n  selector: 'app-merchant-orders',\n  templateUrl: './merchant-orders.component.html',\n  styleUrls: ['./merchant-orders.component.css']\n})\nexport class MerchantOrdersComponent implements OnInit {\n\n  orders: any[] = [];\n\n  orderItems: ItemSchema[] = [];\n\n  showOverlay = false;\n  constructor(private http: HttpClient) { }\n\n  ngOnInit() {\n    this.getMyOrders();\n  }\n\n\n  openConfirmation(item: ItemSchema[]) {\n    this.showOverlay = true;\n    this.orderItems = item;\n    console.log(this.orderItems);\n  }\n\n  prevent(event, order) {\n    this.deliveryorder(order);\n    event.stopPropagation();\n  }\n\n  deliveryorder(order) {\n    if (order) {\n      this.http.post('/api/orders/delivery', order).subscribe((res) => {\n        this.getMyOrders();\n      });\n    }\n  }\n  hideOverlay(event) {\n    this.showOverlay = !this.showOverlay;\n  }\n\n  getMyOrders() {\n    this.http.get(\"/api/orders/list\").subscribe((orders: any) => {\n      this.orders = orders.data;\n    });\n  }\n\n}\n","<div class=\"container\">\n    <div id=\"calculator\">\n        <!-- TITLE -->\n\n        <!-- ENTRY BOX -->\n\n        <div id=\"entrybox\" class=\"text-right\">\n            <div id=\"entry\">\n                <p id=\"answer\" #total>0</p>\n            </div>\n            <div id=\"history\">\n                <p>0</p>\n            </div>\n        </div>\n\n        <!-- BUTTONS -->\n\n        <div id=\"buttons\">\n            <button class=\"red\" value=\"ac\">AC</button>\n            <button class=\"red\" value=\"ce\">CE</button>\n            <button value=\"/\">&divide;</button>\n            <button value=\"*\">x</button>\n\n            <button value=\"7\">7</button>\n            <button value=\"8\">8</button>\n            <button value=\"9\">9</button>\n            <button value=\"-\">-</button>\n\n            <button value=\"4\">4</button>\n            <button value=\"5\">5</button>\n            <button value=\"6\">6</button>\n            <button value=\"+\">+</button>\n\n            <button value=\"1\">1</button>\n            <button value=\"2\">2</button>\n            <button value=\"3\">3</button>\n            <button class=\"invisible\">N</button>\n\n            <button id=\"zeroButton\" value=\"0\">0</button>\n            <button value=\".\">.</button>\n            <button id=\"equalButton\" value=\"=\">=</button>\n\n            <div id=\"title\" class=\"text-center\">\n                <!-- <h5><b>ELECTRONIC CALCULATOR</b></h5> -->\n                <button class=\"btn red order create-order\" (click)=\"openConfirmation(120)\">\n                    Create Order\n                </button>\n            </div>\n        </div>\n        <!-- end buttons -->\n        <!-- <div id='tester'> -->\n\n        <!-- </div> -->\n    </div>\n    <!-- end calculator -->\n</div>\n\n<!-- end container -->\n\n<footer id=\"footer\" class=\"text-center\">\n    <div class=\"container\">\n        Designed & Coded by\n        <a href=\"https://www.linkedin.com/in/justin-woodward-891772118\" target=\"_blank\">\n            Justin Woodward</a>\n    </div>\n</footer>\n<div class=\"create-order\">\n    <div class=\"overlay\" (click)=\"hideOverlay($event)\" *ngIf=\"showOverlay\">\n        <div class=\"content\" (click)=\"prevent($event)\">\n            <div class=\"modal\">\n                <!-- <div  > -->\n                <!-- <items-in-list class=\"content\" *ngFor=\"let items of orderItems\" [item]=\"items\" [disabled]=\"true\"></items-in-list> -->\n                <!-- </div> -->\n                <div class=\"grid-item-container\">\n                    <div class=\"grid-items payme\" *ngIf=\"payMod=='reset'\">\n                        <button class=\"btn red order\" (click)=\"changePaymentMode('req')\">Take Payment</button>\n                        <button class=\"btn red order\" (click)=\"changePaymentMode('wp')\">WhatsApp Pay.</button>\n                    </div>\n                    \n                    <div class=\"grid-items\" *ngIf=\"payMod=='wp'\" style=\"text-align: center;\">\n                        <button class=\"btn  red order wp-text\" (click)=\"createWpLink()\">\n                            <!-- href=\"{{'whatsapp://send?text=Pay your Last bill @ : https://societystore.co/api/pay/' + newOrder.id}}\" -->\n                    \n                            Send\n                            <img [lazyLoad]=\"'../../../assets/images/wp.svg'\">\n                            Link\n                        </button>\n                    </div>\n                    <div class=\"grid-items\" *ngIf=\"!upiSelected && payMod=='req'\">\n                        <product-search [isFlat]=\"true\" [Qurl]=\"'/api/search/gvpa?ed=3&q='\" (searchResult)=\"upiList($event)\"\n                                [placeholder]=\"'Search/Add  UPI Address'\" (isLoading)=\"isloading($event)\"></product-search>\n                        <div class=\"search-list\">\n                            <ul class=\"upi-list\">\n                                <li *ngFor=\"let upi of searchResult; let i = index\" (click)=\"selectedUpi(upi)\">\n                                    {{ upi.name }}\n                                    {{ upi.Vpa }}\n                                </li>\n                            </ul>\n                        </div>\n                    </div>\n                    <div class=\"grid-items confirm\" *ngIf=\"upiSelected && payMod=='req' \">\n                        <ul class=\"payment-confirm\">\n                            <li><label>Amoun : </label> {{ newOrder.amount }}</li>\n                            <li><label>Name : </label> {{ newOrder.upi.name }}</li>\n                            <li><label>Upi Address: </label>{{ newOrder.upi.Vpa }}</li>\n                        </ul>\n\n                        <button class=\"btn red order\" [disabled]=\"newOrder?.amount <= 0 || newOrder?.amount == ''\">\n                            Take Payment\n                        </button>\n                        <!-- <a class=\"btn btn-primary\" style=\"\" id=\"paylink\"\n                            href=\"upi://pay?pa=8116299165@ybl&pn=apurbamondal&tn=undefined&am=200\"><i class=\"fa fa-money\"></i>\n                            <span data-i18n=\"upiqrc-btn-pay\">Pay apurbamondal using UPI</span></a> -->\n                            <!-- <a class=\"btn btn-primary\" id=\"paylink\" href=\"/api/pay/asmf2pn\"><i class=\"fa fa-money\"></i>\nspan data-i18n=\"upiqrc-btn-pay\">Pay apurbamondal using UPI</span>\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                </a> -->\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>","import { HttpClient } from '@angular/common/http';\nimport { Component, OnInit, ViewChild } from '@angular/core';\n\nlet $: any;\n@Component({\n  selector: 'app-calculator',\n  templateUrl: './calculator.component.html',\n  styleUrls: ['./calculator.component.css'],\n  providers: [\n    { provide: Window, useValue: window }\n  ]\n})\nexport class CalculatorComponent implements OnInit {\n  showOverlay = false;\n\n  searchResult: any[] = [];\n  upiSelected = false;\n  isloaded: boolean = false;\n  payMod = 'reset';\n  @ViewChild('total') total;\n\n\n\n\n  newOrder: any = { upi: {}, amount: 0 };\n\n  constructor(\n    private window: Window,\n    private http: HttpClient\n\n  ) { }\n\n  ngOnInit(): void {\n    // final draft\n  }\n\n  public loadScript() {\n    let body = <HTMLDivElement>document.body;\n    let script = document.createElement('script');\n    script.innerHTML = '';\n    script.src = '/assets/js/calc.js';\n    script.async = true;\n    script.defer = true;\n    body.appendChild(script);\n  }\n  ngAfterViewInit() {\n    this.loadScript();\n  }\n\n  openConfirmation(order) {\n    try {\n\n      this.newOrder.amount = parseInt(this.total.nativeElement.innerHTML);\n      if (this.newOrder.amount > 0) {\n        this.showOverlay = true;\n      }\n    }\n    catch (e) {\n      this.newOrder.amount = 1;\n    }\n\n  }\n\n  prevent(event, order) {\n    event.stopPropagation();\n  }\n\n  hideOverlay(event) {\n    this.showOverlay = !this.showOverlay;\n    this.upiSelected = false;\n    this.newOrder = {};\n    this.payMod = 'reset';\n  }\n\n  upiList(data) {\n    this.searchResult = data.data;\n  }\n\n\n  selectedUpi(upi) {\n    this.upiSelected = true;\n    this.newOrder.upi = upi;\n    // this.newOrder.amount =\n  }\n\n  createWpLink() {\n    let url = 'whatsapp://send?text=Pay your Last bill of ' + this.newOrder.amount + ' to  : https://societystore.co/api/pay/';\n\n    this.http.post(\"api/orders/payment/link\", { amount: this.newOrder.amount }).subscribe((res: any) => {\n      this.window.open(url + res.data._id.substring(res.data._id.length - 5, res.data._id.length), \"_blank\", \"toolbar=yes,scrollbars=yes,resizable=yes,top=500,left=500,width=400,height=400\");\n    });\n  }\n\n  isloading(data) {\n    this.isloaded = data;\n    console.log(this.isloaded);\n\n  }\n\n  changePaymentMode(mode) {\n    this.payMod = mode;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { APP_BASE_HREF, CommonModule } from '@angular/common';\nimport { RouterModule, Routes } from '@angular/router';\nimport { AuthGuardService } from 'src/app/shared/services/auth-guard/auth-guard.service';\nimport { SharedModule } from 'src/app/sharedModule/shared/shared.module';\nimport { MerchantHomeComponent } from './merchant-home/merchant-home.component';\nimport { MerchantOrdersComponent } from './merchant-orders/merchant-orders.component';\nimport { MerchantPendingPaymentComponent } from './merchant-pending-payment/merchant-pending-payment.component';\nimport { MerchantTodayTotalComponent } from './merchant-today-total/merchant-today-total.component';\nimport { CalculatorComponent } from 'src/app/components/calculator/calculator.component';\nimport { LazyLoadImageModule } from 'ng-lazyload-image';\n\nconst routes: Routes = [\n\n  {\n    path: \"\",\n    pathMatch: \"full\",\n    component: MerchantHomeComponent,\n    canActivate: [AuthGuardService],\n  },\n  {\n    path: \"orders\",\n    pathMatch: \"full\",\n    component: MerchantOrdersComponent,\n    // canActivate: [AuthGuardService],\n  },\n  {\n    path: \"payment\",\n    pathMatch: \"full\",\n    component: MerchantPendingPaymentComponent,\n    // canActivate: [AuthGuardService],\n  },\n  {\n    path: \"today\",\n    pathMatch: \"full\",\n    component: MerchantTodayTotalComponent,\n    // canActivate: [AuthGuardService],\n  },\n  {\n    path: \"calc\",\n    pathMatch: \"full\",\n    component: CalculatorComponent\n  }\n];\n\n@NgModule({\n  declarations: [\n    MerchantHomeComponent,\n    MerchantOrdersComponent,\n    MerchantPendingPaymentComponent,\n    MerchantTodayTotalComponent,\n    CalculatorComponent\n  ],\n  imports: [\n    CommonModule,\n    // ItemListComponent,\n    // ItemsInListComponent,\n    // ProductSearchComponent,\n    SharedModule,\n    LazyLoadImageModule,\n    RouterModule.forChild(routes)\n  ],\n  providers: [\n    { provide: APP_BASE_HREF, useValue: '/merchant/' },\n\n  ]\n})\nexport class MerchantModule { }\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-merchant-pending-payment',\n  templateUrl: './merchant-pending-payment.component.html',\n  styleUrls: ['./merchant-pending-payment.component.css']\n})\nexport class MerchantPendingPaymentComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","<p>\n  merchant-pending-payment works!\n</p>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-merchant-today-total',\n  templateUrl: './merchant-today-total.component.html',\n  styleUrls: ['./merchant-today-total.component.css']\n})\nexport class MerchantTodayTotalComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","<p>\n  merchant-today-total works!\n</p>\n"],"sourceRoot":"webpack:///"}